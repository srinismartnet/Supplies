@page "/fetchdetails"

@using SampleBlazorCURD.Shared
@inject HttpClient Http
<h1>Manufacture Details</h1>
<div class="loader" style="display: @(_isLoading ? "block" : "none")"></div>
<div class="row">
    <div class="col-md-6">
        <a href='/manufacture/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Manufacturer
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search manufacturer by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterManufacture" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (manufactureList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>Location</th>
                <th>Name Of Contact</th>
                <th>Phone Number</th>
                <th>E-mail</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var manufacture in manufactureList)
            {
                <tr>
                    <td>@manufacture.Name</td>
                    <td>@manufacture.Address</td>
                    <td>@manufacture.Location</td>
                    <td>@manufacture.NameOfContact</td>
                    <td>@manufacture.PhoneNumber</td>
                    <td>@manufacture.EmailId</td>
                    <td>
                        <a href='/manufacture/edit/@manufacture.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/manufacture/delete/@manufacture.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>

    </table>
}

@code {

    protected List<ManufacturingCompany> manufactureList = new();
    protected List<ManufacturingCompany> searchManufactureData = new();
    protected ManufacturingCompany manufacture = new();
    protected string SearchString { get; set; } = string.Empty;
    private bool _isLoading = false;
    protected override async Task OnInitializedAsync()
    {
        await GetManufactures();
    }
    protected async Task GetManufactures()
    {
        _isLoading = true;
        manufactureList = await Http.GetFromJsonAsync<List<ManufacturingCompany>>("api/Manufacture");
        searchManufactureData = manufactureList;
        _isLoading = false;
    }

    protected void FilterManufacture()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            manufactureList = searchManufactureData
                .Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            manufactureList = searchManufactureData;
        }
    }
    protected void DeleteConfirm(int Id)
    {
        manufacture = manufactureList.FirstOrDefault(x => x.Id == Id);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        manufactureList = searchManufactureData;
    }
}
